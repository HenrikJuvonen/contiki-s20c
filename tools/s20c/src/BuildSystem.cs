using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace cc
{
    public class BuildSystem
    {
        public string Name { get; set; }
        public string[] IncludeDirs { get; set; }
        public string[] Files { get; set; }
        public string ObjectDir { get; set; }
        public string RootDir { get; set; }
        public string[] PreprocessorDefinitions { get; set; }
        public string UccPath { get; set; }
        public string ProfilePath { get; set; }
        
        public BuildSystem(string name, List<string> includeDirs, List<string> files, string objectDir, string rootDir, List<string> preprocessorDefinitions, string uccPath, string profilePath)
        {
            Name = name;
            IncludeDirs = includeDirs.ToArray();
            Files = files.ToArray();
            ObjectDir = objectDir;
            RootDir = rootDir;
            PreprocessorDefinitions = preprocessorDefinitions.ToArray();
            UccPath = uccPath;
            ProfilePath = profilePath;
            Directory.CreateDirectory(ObjectDir);
        }

        public void GenerateProjectFile()
        {
            var filename = Name + ".prj";
            Logger.WriteLine("Generating project file...");

            var document = new XElement("document");
            document.SetAttributeValue("version", "1.0");
            document.Add(new XComment("<!--Generated by Developer v7.2.2 (Build 0) 2.12.2013-->"));
            document.Add(new XComment("<!--Data is automatically generated. DO NOT EDIT!-->"));
            document.Add(DeveloperProject.Generate(Name, ObjectDir, PreprocessorDefinitions, IncludeDirs, RootDir, Files));

            var doc = new XDocument(new XDeclaration("1.0", "iso-8859-1", null), document);
            File.Delete(filename);
            using (var file = File.Create(filename))
            {
                doc.Save(file);
            }
        }

        public void Compile()
        {
            Logger.WriteLine("Compiling...");
            var files = Files.Select(n => new { input = Path.Combine(RootDir, n).Replace('\\', '/'), output = ObjectDir + "/" + Path.GetFileNameWithoutExtension(n) + ".ca"});
            foreach (var file in files)
            {
                Compile(file.input, file.output);
            }
        }

        public void Compile(string input, string output)
        {
            var path = Path.Combine(UccPath, "ucom").Replace('\\', '/');
            var options = "-r -g -w -C99 -e -a -O";
            var includes = string.Join(" ", new[] { "-I\"" + Path.Combine(ProfilePath, "include").Replace('\\', '/') + "\"" }.Concat(IncludeDirs.Select(n => "-I\"" + n + "\"")));
            var defines = string.Join(" ", PreprocessorDefinitions.Select(n => "-D" + n));
            Run(path, false, options, includes, defines, input, output);
        }

        public void Assemble()
        {
            Logger.WriteLine("Assembling...");
            var files = Files.Select(n => new { input = ObjectDir + "/" + Path.GetFileNameWithoutExtension(n) + ".ca", output = ObjectDir + "/" + Path.GetFileNameWithoutExtension(n) + ".obj" });
            foreach (var file in files)
            {
                Assemble(file.input, file.output);
            }
        }

        public void Assemble(string input, string output)
        {
            var path = Path.Combine(UccPath, "uasm").Replace('\\', '/');
            var options = "-report -isa:isa_im3000";
            Run(path, false, options, "-lst:" + Path.Combine(ObjectDir, Path.GetFileNameWithoutExtension(input) + ".lst").Replace('\\', '/'), "-out:" + output, input);
        }
        
        public void CompileAndAssemble()
        {
            Logger.WriteLine("Compiling...");
            var files = Files.Select(n => new { input = Path.Combine(RootDir, n).Replace('\\', '/'), output = ObjectDir + "/" + Path.GetFileNameWithoutExtension(n) + ".obj" });
            Parallel.ForEach(files, file =>
            {
                CompileAndAssemble(file.input, file.output);
            });
        }

        public void CompileAndAssemble(string input, string output)
        {
            Logger.WriteLine(ConsoleColor.Cyan, "CC " + input.Remove(0, RootDir.Length+1));
            var temp = Path.Combine(ObjectDir, Path.GetFileNameWithoutExtension(input) + ".ca").Replace('\\', '/');
            Compile(input, temp);
            Assemble(temp, output);
            File.Delete(temp);
        }

        public void Link()
        {
            Logger.WriteLine("Linking...");
            var output = Name + ".gpx";
            var map = Name + ".map";
            var files = Files.Select(n => "\"" + ObjectDir + "/" + Path.GetFileNameWithoutExtension(n) + ".obj\"").ToArray();
            Link(files, output, map);
        }

        public void Link(string[] inputs, string output, string map)
        {
            var path = Path.Combine(UccPath, "uccln").Replace('\\', '/');
            var options = "-report -l:\"" + Path.Combine(ProfilePath, "lib").Replace('\\', '/') + "\"";
            var libs = string.Join(" ", new[]
            {
                //"rubus.lib",
                "libc.lib",
                //"ish.lib",
                //"effs.lib",
                //"tcpip.lib",
                //"zlib.lib",
                //"cldc.lib",
                //"crypt.lib",
                "im3910m210.lib"
            }.Select(n => "-lib:" + n));
            var options2 = "-out:\"" + output + "\" -map:\"" + map + "\" -arch:isa_im3000";
            var obj = "\"" + Path.Combine(ProfilePath, "lib", "c0start.obj").Replace('\\', '/') + "\"";
            Run(path, false, options, libs, options2, obj, string.Join(" ", inputs));
        }

        public void Debug()
        {
            var path = Path.Combine(UccPath, "../..", "cimdev").Replace('\\', '/');
            KillAll(path);
            Run(path, true, Name + ".prj");
        }

        private void KillAll(string path)
        {
            foreach (var process in Process.GetProcessesByName(Path.GetFileName(path)))
            {
                process.Kill();
            }
        }

        private void Run(string path, bool background, params string[] args)
        {
            var arg = string.Join(" ", args);
            var process = new Process
            {
                StartInfo = new ProcessStartInfo(path, arg)
                {
                    UseShellExecute = false
                }
            };
            process.Start();
            if (background)
            {
                return;
            }
            process.WaitForExit();
            if (process.ExitCode != 0)
            {
                var errors = process.ExitCode & 0xFF;
                var warnings = (process.ExitCode >> 16) & 0xFF;
                Logger.WriteLine(ConsoleColor.Red, "{0} errors, {1} warnings", errors, warnings);
            }
        }
    }
}